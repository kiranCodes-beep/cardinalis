{"ast":null,"code":"import { functions } from './firebase';\nimport { httpsCallable } from 'firebase/functions';\n\n// Removed emulator connection logic to avoid circular dependency\n\nexport const createStripeCheckoutSession = async (cartItems, successUrl, cancelUrl) => {\n  try {\n    const callable = httpsCallable(functions, 'createStripeCheckoutSession');\n    const result = await callable({\n      items: cartItems,\n      successUrl,\n      cancelUrl\n    });\n    return result.data;\n  } catch (error) {\n    console.error('Error creating checkout session:', error);\n    throw error;\n  }\n};\nexport const generateInvoice = async sessionId => {\n  try {\n    const callable = httpsCallable(functions, 'generateInvoice');\n    const result = await callable({\n      sessionId\n    });\n    return result.data;\n  } catch (error) {\n    console.error('Error generating invoice:', error);\n    throw error;\n  }\n};\n// Payment processing function\nexport const processPayment = async amount => {\n  try {\n    const callable = httpsCallable(functions, 'processPayment');\n    const result = await callable({\n      amount\n    });\n    return result.data;\n  } catch (error) {\n    console.error('Payment error:', error);\n    throw new Error(error.message || 'Payment processing failed');\n  }\n};\n\n// Other cloud functions can be added here\nexport const createStripePaymentIntent = async amount => {\n  try {\n    const callable = httpsCallable(functions, 'createPaymentIntent');\n    const result = await callable({\n      amount\n    });\n    return result.data;\n  } catch (error) {\n    console.error('Payment intent error:', error);\n    throw new Error(error.message || 'Failed to create payment intent');\n  }\n};\nexport const getStripeSession = async sessionId => {\n  try {\n    const callable = httpsCallable(functions, 'getStripeSession');\n    const result = await callable({\n      sessionId\n    });\n    return result.data;\n  } catch (error) {\n    console.error('Error fetching Stripe session:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["functions","httpsCallable","createStripeCheckoutSession","cartItems","successUrl","cancelUrl","callable","result","items","data","error","console","generateInvoice","sessionId","processPayment","amount","Error","message","createStripePaymentIntent","getStripeSession"],"sources":["C:/Users/kiran/Downloads/e-commerce/front_end_copy/src/firebase/functions.js"],"sourcesContent":["import { functions } from './firebase';\r\nimport { httpsCallable } from 'firebase/functions';\r\n\r\n// Removed emulator connection logic to avoid circular dependency\r\n\r\nexport const createStripeCheckoutSession = async (cartItems, successUrl, cancelUrl) => {\r\n  try {\r\n    const callable = httpsCallable(functions, 'createStripeCheckoutSession');\r\n    const result = await callable({\r\n      items:cartItems,\r\n      successUrl,\r\n      cancelUrl\r\n    });\r\n    return result.data;\r\n  } catch (error) {\r\n    console.error('Error creating checkout session:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const generateInvoice = async (sessionId) => {\r\n  try {\r\n    const callable = httpsCallable(functions, 'generateInvoice');\r\n    const result = await callable({ sessionId });\r\n    return result.data;\r\n  } catch (error) {\r\n    console.error('Error generating invoice:', error);\r\n    throw error;\r\n  }\r\n};\r\n// Payment processing function\r\nexport const processPayment = async (amount) => {\r\n  try {\r\n    const callable = httpsCallable(functions, 'processPayment');\r\n    const result = await callable({ amount });\r\n    return result.data;\r\n  } catch (error) {\r\n    console.error('Payment error:', error);\r\n    throw new Error(error.message || 'Payment processing failed');\r\n  }\r\n};\r\n\r\n// Other cloud functions can be added here\r\nexport const createStripePaymentIntent = async (amount) => {\r\n  try {\r\n    const callable = httpsCallable(functions, 'createPaymentIntent');\r\n    const result = await callable({ amount });\r\n    return result.data;\r\n  } catch (error) {\r\n    console.error('Payment intent error:', error);\r\n    throw new Error(error.message || 'Failed to create payment intent');\r\n  }\r\n};\r\n\r\nexport const getStripeSession = async (sessionId) => {\r\n  try {\r\n    const callable = httpsCallable(functions, 'getStripeSession');\r\n    const result = await callable({ sessionId });\r\n    return result.data;\r\n  } catch (error) {\r\n    console.error('Error fetching Stripe session:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"AAAA,SAASA,SAAS,QAAQ,YAAY;AACtC,SAASC,aAAa,QAAQ,oBAAoB;;AAElD;;AAEA,OAAO,MAAMC,2BAA2B,GAAG,MAAAA,CAAOC,SAAS,EAAEC,UAAU,EAAEC,SAAS,KAAK;EACrF,IAAI;IACF,MAAMC,QAAQ,GAAGL,aAAa,CAACD,SAAS,EAAE,6BAA6B,CAAC;IACxE,MAAMO,MAAM,GAAG,MAAMD,QAAQ,CAAC;MAC5BE,KAAK,EAACL,SAAS;MACfC,UAAU;MACVC;IACF,CAAC,CAAC;IACF,OAAOE,MAAM,CAACE,IAAI;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,eAAe,GAAG,MAAOC,SAAS,IAAK;EAClD,IAAI;IACF,MAAMP,QAAQ,GAAGL,aAAa,CAACD,SAAS,EAAE,iBAAiB,CAAC;IAC5D,MAAMO,MAAM,GAAG,MAAMD,QAAQ,CAAC;MAAEO;IAAU,CAAC,CAAC;IAC5C,OAAON,MAAM,CAACE,IAAI;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACb;AACF,CAAC;AACD;AACA,OAAO,MAAMI,cAAc,GAAG,MAAOC,MAAM,IAAK;EAC9C,IAAI;IACF,MAAMT,QAAQ,GAAGL,aAAa,CAACD,SAAS,EAAE,gBAAgB,CAAC;IAC3D,MAAMO,MAAM,GAAG,MAAMD,QAAQ,CAAC;MAAES;IAAO,CAAC,CAAC;IACzC,OAAOR,MAAM,CAACE,IAAI;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACtC,MAAM,IAAIM,KAAK,CAACN,KAAK,CAACO,OAAO,IAAI,2BAA2B,CAAC;EAC/D;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,yBAAyB,GAAG,MAAOH,MAAM,IAAK;EACzD,IAAI;IACF,MAAMT,QAAQ,GAAGL,aAAa,CAACD,SAAS,EAAE,qBAAqB,CAAC;IAChE,MAAMO,MAAM,GAAG,MAAMD,QAAQ,CAAC;MAAES;IAAO,CAAC,CAAC;IACzC,OAAOR,MAAM,CAACE,IAAI;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAM,IAAIM,KAAK,CAACN,KAAK,CAACO,OAAO,IAAI,iCAAiC,CAAC;EACrE;AACF,CAAC;AAED,OAAO,MAAME,gBAAgB,GAAG,MAAON,SAAS,IAAK;EACnD,IAAI;IACF,MAAMP,QAAQ,GAAGL,aAAa,CAACD,SAAS,EAAE,kBAAkB,CAAC;IAC7D,MAAMO,MAAM,GAAG,MAAMD,QAAQ,CAAC;MAAEO;IAAU,CAAC,CAAC;IAC5C,OAAON,MAAM,CAACE,IAAI;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}