{"ast":null,"code":"import { initializeApp, getApps, getApp } from 'firebase/app';\nimport { getAuth, createUserWithEmailAndPassword as fbCreateUser, signInWithEmailAndPassword as fbSignIn, GoogleAuthProvider, signInWithPopup as fbSignInPopup, sendEmailVerification, sendPasswordResetEmail, onAuthStateChanged as fbOnAuthStateChanged, signOut as fbSignOut } from 'firebase/auth';\nimport { getFirestore, doc, setDoc, getDoc, serverTimestamp, collection, updateDoc, arrayUnion // Only declare this once\n} from 'firebase/firestore';\nimport { getFunctions, connectFunctionsEmulator } from 'firebase/functions';\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\n};\n\n// Initialize Firebase only once\nconst app = getApps().length > 0 ? getApp() : initializeApp(firebaseConfig);\n\n// Initialize services\nconst auth = getAuth(app);\nconst db = getFirestore(app);\n// Use the correct region for functions\nexport const functions = getFunctions(app, \"asia-south1\");\nif (process.env.NODE_ENV === 'development' && window.location.hostname === 'localhost') {\n  connectFunctionsEmulator(functions, 'localhost', 5010);\n}\n\n// Firestore Collections\nconst usersCollection = collection(db, 'users');\nconst productsCollection = collection(db, 'products');\nconst userCartsCollection = collection(db, 'userCarts');\n\n// User Profile Management\nconst getUserProfile = async uid => {\n  if (!uid) return null;\n  try {\n    const docSnap = await getDoc(doc(db, 'users', uid));\n    return docSnap.exists() ? {\n      uid,\n      ...docSnap.data()\n    } : null;\n  } catch (error) {\n    console.error('Failed to fetch user profile:', error);\n    throw new Error('User profile fetch failed');\n  }\n};\nconst createUserProfile = async (user, additionalData = {}) => {\n  if (!(user !== null && user !== void 0 && user.uid)) throw new Error('No user UID provided');\n  const userRef = doc(db, 'users', user.uid);\n  try {\n    await setDoc(userRef, {\n      uid: user.uid,\n      email: user.email,\n      emailVerified: user.emailVerified || false,\n      createdAt: serverTimestamp(),\n      lastLogin: serverTimestamp(),\n      ...additionalData\n    }, {\n      merge: true\n    });\n    return await getUserProfile(user.uid);\n  } catch (error) {\n    console.error('Failed to create user profile:', error);\n    throw new Error('User profile creation failed');\n  }\n};\nconst updateUserProfile = async (uid, data) => {\n  try {\n    await setDoc(doc(db, 'users', uid), data, {\n      merge: true\n    });\n    return await getUserProfile(uid);\n  } catch (error) {\n    console.error('Profile update failed:', error);\n    throw error;\n  }\n};\n\n// Cart Management\nconst getUserCart = async uid => {\n  try {\n    const cartSnap = await getDoc(doc(db, 'userCarts', uid));\n    return cartSnap.exists() ? cartSnap.data() : {\n      items: [],\n      coupon: null,\n      discount: 0\n    };\n  } catch (error) {\n    console.error('Error getting user cart:', error);\n    return {\n      items: [],\n      coupon: null,\n      discount: 0\n    };\n  }\n};\nconst updateUserCart = async (uid, cartData) => {\n  try {\n    await setDoc(doc(db, 'userCarts', uid), {\n      ...cartData,\n      updatedAt: serverTimestamp()\n    }, {\n      merge: true\n    });\n    return true;\n  } catch (error) {\n    console.error('Error updating user cart:', error);\n    throw error;\n  }\n};\nconst mergeCarts = async (userId, guestCart) => {\n  try {\n    if (!(guestCart !== null && guestCart !== void 0 && guestCart.items) || guestCart.items.length === 0) return true;\n    const userCartRef = doc(db, 'userCarts', userId);\n    const userCartSnap = await getDoc(userCartRef);\n    if (userCartSnap.exists()) {\n      // Merge items, avoiding duplicates\n      const existingItems = userCartSnap.data().items || [];\n      const newItems = guestCart.items.filter(guestItem => !existingItems.some(existingItem => existingItem.id === guestItem.id && existingItem.size === guestItem.size && existingItem.color === guestItem.color));\n      if (newItems.length > 0) {\n        await updateDoc(userCartRef, {\n          items: arrayUnion(...newItems),\n          updatedAt: serverTimestamp()\n        });\n      }\n    } else {\n      // Create new cart with guest items\n      await setDoc(userCartRef, {\n        items: guestCart.items,\n        coupon: guestCart.coupon || null,\n        discount: guestCart.discount || 0,\n        updatedAt: serverTimestamp()\n      });\n    }\n    return true;\n  } catch (error) {\n    console.error('Error merging carts:', error);\n    throw error;\n  }\n};\nconst clearUserCart = async userId => {\n  try {\n    await setDoc(doc(db, 'userCarts', userId), {\n      items: [],\n      coupon: null,\n      discount: 0,\n      updatedAt: serverTimestamp()\n    });\n    return true;\n  } catch (error) {\n    console.error('Error clearing user cart:', error);\n    throw error;\n  }\n};\n\n// Authentication Services\n// Updated registerUser function with better error handling\nconst registerUser = async (email, password, userData = {}) => {\n  try {\n    // 1. Create auth user\n    const {\n      user\n    } = await fbCreateUser(auth, email, password);\n\n    // 2. Send verification email\n    await sendEmailVerification(user);\n\n    // 3. Prepare user document data\n    const userDoc = {\n      uid: user.uid,\n      email: user.email,\n      emailVerified: false,\n      createdAt: serverTimestamp(),\n      lastLogin: serverTimestamp(),\n      ...userData,\n      // Ensure critical fields aren't overwritten\n      isAdmin: userData.isAdmin || false,\n      disabled: false\n    };\n\n    // 4. Create user document in Firestore\n    await setDoc(doc(db, 'users', user.uid), userDoc);\n\n    // 5. Create empty cart for the user\n    await setDoc(doc(db, 'userCarts', user.uid), {\n      items: [],\n      coupon: null,\n      discount: 0,\n      updatedAt: serverTimestamp(),\n      createdAt: serverTimestamp()\n    });\n\n    // 6. Return complete user data\n    return {\n      user,\n      profile: userDoc,\n      cart: {\n        items: []\n      }\n    };\n  } catch (error) {\n    console.error('Registration failed:', error);\n\n    // Handle specific error cases\n    let errorMessage = 'Registration failed. Please try again.';\n    if (error.code === 'auth/email-already-in-use') {\n      errorMessage = 'Email already in use';\n    } else if (error.code === 'auth/invalid-email') {\n      errorMessage = 'Invalid email address';\n    } else if (error.code === 'auth/weak-password') {\n      errorMessage = 'Password should be at least 6 characters';\n    }\n    throw new Error(errorMessage);\n  }\n};\nconst loginUser = async (email, password) => {\n  try {\n    // Clear any existing cart data in memory before login\n    localStorage.removeItem('cart');\n    const {\n      user\n    } = await fbSignIn(auth, email, password);\n    await updateUserProfile(user.uid, {\n      lastLogin: serverTimestamp()\n    });\n    const profile = await getUserProfile(user.uid);\n\n    // Clear any previous cart data from localStorage\n    localStorage.removeItem('cart');\n\n    // Load fresh cart from user's Firestore record\n    const userCart = await getUserCart(user.uid);\n    return {\n      user,\n      profile,\n      cart: userCart // Return the user's cart data\n    };\n  } catch (error) {\n    console.error('Login failed:', error);\n    throw error;\n  }\n};\nconst logoutUser = async () => {\n  try {\n    // Clear cart from localStorage on logout\n    localStorage.removeItem('cart');\n    await fbSignOut(auth);\n    return true;\n  } catch (error) {\n    console.error('Logout failed:', error);\n    throw error;\n  }\n};\n\n// Social Login\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nconst loginWithGoogle = async () => {\n  try {\n    // Clear any existing cart data in memory before login\n    localStorage.removeItem('cart');\n    const {\n      user\n    } = await fbSignInPopup(auth, googleProvider);\n    const profile = await createUserProfile(user, {\n      displayName: user.displayName,\n      photoURL: user.photoURL,\n      provider: 'google'\n    });\n\n    // Clear any previous cart data from localStorage\n    localStorage.removeItem('cart');\n\n    // Load fresh cart from user's Firestore record\n    const userCart = await getUserCart(user.uid);\n    return {\n      user,\n      profile,\n      cart: userCart // Return the user's cart data\n    };\n  } catch (error) {\n    console.error('Google login failed:', error);\n    throw error;\n  }\n};\n\n// Account Services\nconst sendPasswordReset = async email => {\n  try {\n    await sendPasswordResetEmail(auth, email);\n    return true;\n  } catch (error) {\n    console.error('Password reset failed:', error);\n    throw error;\n  }\n};\n\n// Auth State Listener\nconst initAuthListener = callback => {\n  return fbOnAuthStateChanged(auth, async user => {\n    if (user) {\n      try {\n        const profile = await getUserProfile(user.uid);\n        callback({\n          ...user,\n          ...profile,\n          isAdmin: (profile === null || profile === void 0 ? void 0 : profile.isAdmin) || false\n        });\n      } catch (error) {\n        console.error('Auth state error:', error);\n        callback(null);\n      }\n    } else {\n      callback(null);\n    }\n  });\n};\n\n// Helper Functions\nconst getCurrentUser = () => auth.currentUser;\nconst checkAdminStatus = async uid => {\n  const profile = await getUserProfile(uid);\n  return (profile === null || profile === void 0 ? void 0 : profile.isAdmin) || false;\n};\n\n// Single export block with ALL required exports\nexport { app, auth, db,\n// Auth methods\nfbCreateUser, fbSignIn, fbSignOut, fbOnAuthStateChanged,\n// Firestore methods\ndoc, getDoc, setDoc, updateDoc, arrayUnion, serverTimestamp, collection,\n// Other methods\nregisterUser, loginUser, loginWithGoogle, sendPasswordReset, updateUserProfile,\n// Add this line\n\nmergeCarts,\n// Add this line\ngetUserCart,\n// Add this line\n// Collections\nusersCollection, productsCollection, userCartsCollection };","map":{"version":3,"names":["initializeApp","getApps","getApp","getAuth","createUserWithEmailAndPassword","fbCreateUser","signInWithEmailAndPassword","fbSignIn","GoogleAuthProvider","signInWithPopup","fbSignInPopup","sendEmailVerification","sendPasswordResetEmail","onAuthStateChanged","fbOnAuthStateChanged","signOut","fbSignOut","getFirestore","doc","setDoc","getDoc","serverTimestamp","collection","updateDoc","arrayUnion","getFunctions","connectFunctionsEmulator","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","app","length","auth","db","functions","NODE_ENV","window","location","hostname","usersCollection","productsCollection","userCartsCollection","getUserProfile","uid","docSnap","exists","data","error","console","Error","createUserProfile","user","additionalData","userRef","email","emailVerified","createdAt","lastLogin","merge","updateUserProfile","getUserCart","cartSnap","items","coupon","discount","updateUserCart","cartData","updatedAt","mergeCarts","userId","guestCart","userCartRef","userCartSnap","existingItems","newItems","filter","guestItem","some","existingItem","id","size","color","clearUserCart","registerUser","password","userData","userDoc","isAdmin","disabled","profile","cart","errorMessage","code","loginUser","localStorage","removeItem","userCart","logoutUser","googleProvider","setCustomParameters","prompt","loginWithGoogle","displayName","photoURL","provider","sendPasswordReset","initAuthListener","callback","getCurrentUser","currentUser","checkAdminStatus"],"sources":["C:/Users/kiran/Downloads/e-commerce/front_end_copy/src/firebase/firebase.js"],"sourcesContent":["import { initializeApp, getApps, getApp } from 'firebase/app';\nimport { \n  getAuth, \n  createUserWithEmailAndPassword as fbCreateUser,\n  signInWithEmailAndPassword as fbSignIn,\n  GoogleAuthProvider,\n  signInWithPopup as fbSignInPopup,\n  sendEmailVerification,\n  sendPasswordResetEmail,\n  onAuthStateChanged as fbOnAuthStateChanged,\n  signOut as fbSignOut\n} from 'firebase/auth';\nimport { \n  getFirestore, \n  doc, \n  setDoc, \n  getDoc, \n  serverTimestamp,\n  collection,\n  updateDoc,\n  arrayUnion // Only declare this once\n} from 'firebase/firestore';\nimport { getFunctions, connectFunctionsEmulator } from 'firebase/functions';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\n};\n\n// Initialize Firebase only once\nconst app = getApps().length > 0 ? getApp() : initializeApp(firebaseConfig);\n\n\n// Initialize services\nconst auth = getAuth(app);\nconst db = getFirestore(app);\n// Use the correct region for functions\nexport const functions = getFunctions(app, \"asia-south1\");\n\nif (process.env.NODE_ENV === 'development' && window.location.hostname === 'localhost') {\n  connectFunctionsEmulator(functions, 'localhost', 5010);\n}\n\n// Firestore Collections\nconst usersCollection = collection(db, 'users');\nconst productsCollection = collection(db, 'products');\nconst userCartsCollection = collection(db, 'userCarts');\n\n// User Profile Management\nconst getUserProfile = async (uid) => {\n  if (!uid) return null;\n  try {\n    const docSnap = await getDoc(doc(db, 'users', uid));\n    return docSnap.exists() ? { uid, ...docSnap.data() } : null;\n  } catch (error) {\n    console.error('Failed to fetch user profile:', error);\n    throw new Error('User profile fetch failed');\n  }\n};\n\nconst createUserProfile = async (user, additionalData = {}) => {\n  if (!user?.uid) throw new Error('No user UID provided');\n  \n  const userRef = doc(db, 'users', user.uid);\n  try {\n    await setDoc(userRef, {\n      uid: user.uid,\n      email: user.email,\n      emailVerified: user.emailVerified || false,\n      createdAt: serverTimestamp(),\n      lastLogin: serverTimestamp(),\n      ...additionalData\n    }, { merge: true });\n    return await getUserProfile(user.uid);\n  } catch (error) {\n    console.error('Failed to create user profile:', error);\n    throw new Error('User profile creation failed');\n  }\n};\n\nconst updateUserProfile = async (uid, data) => {\n  try {\n    await setDoc(doc(db, 'users', uid), data, { merge: true });\n    return await getUserProfile(uid);\n  } catch (error) {\n    console.error('Profile update failed:', error);\n    throw error;\n  }\n};\n\n// Cart Management\nconst getUserCart = async (uid) => {\n  try {\n    const cartSnap = await getDoc(doc(db, 'userCarts', uid));\n    return cartSnap.exists() ? cartSnap.data() : { items: [], coupon: null, discount: 0 };\n  } catch (error) {\n    console.error('Error getting user cart:', error);\n    return { items: [], coupon: null, discount: 0 };\n  }\n};\n\nconst updateUserCart = async (uid, cartData) => {\n  try {\n    await setDoc(doc(db, 'userCarts', uid), {\n      ...cartData,\n      updatedAt: serverTimestamp()\n    }, { merge: true });\n    return true;\n  } catch (error) {\n    console.error('Error updating user cart:', error);\n    throw error;\n  }\n};\n\nconst mergeCarts = async (userId, guestCart) => {\n  try {\n    if (!guestCart?.items || guestCart.items.length === 0) return true;\n\n    const userCartRef = doc(db, 'userCarts', userId);\n    const userCartSnap = await getDoc(userCartRef);\n\n    if (userCartSnap.exists()) {\n      // Merge items, avoiding duplicates\n      const existingItems = userCartSnap.data().items || [];\n      const newItems = guestCart.items.filter(guestItem => \n        !existingItems.some(existingItem => \n          existingItem.id === guestItem.id && \n          existingItem.size === guestItem.size &&\n          existingItem.color === guestItem.color\n        )\n      );\n\n      if (newItems.length > 0) {\n        await updateDoc(userCartRef, {\n          items: arrayUnion(...newItems),\n          updatedAt: serverTimestamp()\n        });\n      }\n    } else {\n      // Create new cart with guest items\n      await setDoc(userCartRef, {\n        items: guestCart.items,\n        coupon: guestCart.coupon || null,\n        discount: guestCart.discount || 0,\n        updatedAt: serverTimestamp()\n      });\n    }\n\n    return true;\n  } catch (error) {\n    console.error('Error merging carts:', error);\n    throw error;\n  }\n};\n\nconst clearUserCart = async (userId) => {\n  try {\n    await setDoc(doc(db, 'userCarts', userId), {\n      items: [],\n      coupon: null,\n      discount: 0,\n      updatedAt: serverTimestamp()\n    });\n    return true;\n  } catch (error) {\n    console.error('Error clearing user cart:', error);\n    throw error;\n  }\n};\n\n// Authentication Services\n// Updated registerUser function with better error handling\nconst registerUser = async (email, password, userData = {}) => {\n  try {\n    // 1. Create auth user\n    const { user } = await fbCreateUser(auth, email, password);\n    \n    // 2. Send verification email\n    await sendEmailVerification(user);\n    \n    // 3. Prepare user document data\n    const userDoc = {\n      uid: user.uid,\n      email: user.email,\n      emailVerified: false,\n      createdAt: serverTimestamp(),\n      lastLogin: serverTimestamp(),\n      ...userData,\n      // Ensure critical fields aren't overwritten\n      isAdmin: userData.isAdmin || false,\n      disabled: false\n    };\n\n    // 4. Create user document in Firestore\n    await setDoc(doc(db, 'users', user.uid), userDoc);\n    \n    // 5. Create empty cart for the user\n    await setDoc(doc(db, 'userCarts', user.uid), {\n      items: [],\n      coupon: null,\n      discount: 0,\n      updatedAt: serverTimestamp(),\n      createdAt: serverTimestamp()\n    });\n\n    // 6. Return complete user data\n    return { \n      user, \n      profile: userDoc,\n      cart: { items: [] } \n    };\n    \n  } catch (error) {\n    console.error('Registration failed:', error);\n    \n    // Handle specific error cases\n    let errorMessage = 'Registration failed. Please try again.';\n    if (error.code === 'auth/email-already-in-use') {\n      errorMessage = 'Email already in use';\n    } else if (error.code === 'auth/invalid-email') {\n      errorMessage = 'Invalid email address';\n    } else if (error.code === 'auth/weak-password') {\n      errorMessage = 'Password should be at least 6 characters';\n    }\n    \n    throw new Error(errorMessage);\n  }\n};\n\nconst loginUser = async (email, password) => {\n  try {\n    // Clear any existing cart data in memory before login\n    localStorage.removeItem('cart');\n    \n    const { user } = await fbSignIn(auth, email, password);\n    await updateUserProfile(user.uid, { lastLogin: serverTimestamp() });\n    const profile = await getUserProfile(user.uid);\n    \n    // Clear any previous cart data from localStorage\n    localStorage.removeItem('cart');\n    \n    // Load fresh cart from user's Firestore record\n    const userCart = await getUserCart(user.uid);\n    \n    return { \n      user, \n      profile,\n      cart: userCart // Return the user's cart data\n    };\n  } catch (error) {\n    console.error('Login failed:', error);\n    throw error;\n  }\n};\n\nconst logoutUser = async () => {\n  try {\n    // Clear cart from localStorage on logout\n    localStorage.removeItem('cart');\n    await fbSignOut(auth);\n    return true;\n  } catch (error) {\n    console.error('Logout failed:', error);\n    throw error;\n  }\n};\n\n// Social Login\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\n\nconst loginWithGoogle = async () => {\n  try {\n    // Clear any existing cart data in memory before login\n    localStorage.removeItem('cart');\n    \n    const { user } = await fbSignInPopup(auth, googleProvider);\n    const profile = await createUserProfile(user, {\n      displayName: user.displayName,\n      photoURL: user.photoURL,\n      provider: 'google'\n    });\n    \n    // Clear any previous cart data from localStorage\n    localStorage.removeItem('cart');\n    \n    // Load fresh cart from user's Firestore record\n    const userCart = await getUserCart(user.uid);\n    \n    return { \n      user, \n      profile,\n      cart: userCart // Return the user's cart data\n    };\n  } catch (error) {\n    console.error('Google login failed:', error);\n    throw error;\n  }\n};\n\n\n// Account Services\nconst sendPasswordReset = async (email) => {\n  try {\n    await sendPasswordResetEmail(auth, email);\n    return true;\n  } catch (error) {\n    console.error('Password reset failed:', error);\n    throw error;\n  }\n};\n\n// Auth State Listener\nconst initAuthListener = (callback) => {\n  return fbOnAuthStateChanged(auth, async (user) => {\n    if (user) {\n      try {\n        const profile = await getUserProfile(user.uid);\n        callback({ ...user, ...profile, isAdmin: profile?.isAdmin || false });\n      } catch (error) {\n        console.error('Auth state error:', error);\n        callback(null);\n      }\n    } else {\n      callback(null);\n    }\n  });\n};\n\n// Helper Functions\nconst getCurrentUser = () => auth.currentUser;\n\nconst checkAdminStatus = async (uid) => {\n  const profile = await getUserProfile(uid);\n  return profile?.isAdmin || false;\n};\n\n// Single export block with ALL required exports\nexport {\n  app,\n  auth,\n  db,\n  \n  // Auth methods\n  fbCreateUser,\n  fbSignIn,\n  fbSignOut,\n  fbOnAuthStateChanged,\n  // Firestore methods\n  doc,\n  getDoc,\n  setDoc,\n  updateDoc,\n  arrayUnion,\n  serverTimestamp,\n  collection,\n  // Other methods\n  registerUser,\n  loginUser,\n  loginWithGoogle,\n  sendPasswordReset,\n  updateUserProfile, // Add this line\n\n  mergeCarts,      // Add this line\n  getUserCart,     // Add this line\n  // Collections\n  usersCollection,\n  productsCollection,\n  userCartsCollection\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}