{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kiran\\\\Downloads\\\\e-commerce\\\\front_end_copy\\\\src\\\\Context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  // Initialize currentUser from localStorage\n  const [currentUser, setCurrentUser] = useState(() => {\n    const storedUser = localStorage.getItem('currentUser');\n    return storedUser ? JSON.parse(storedUser) : null;\n  });\n  const [loading, setLoading] = useState(false);\n\n  // Sync currentUser to localStorage\n  useEffect(() => {\n    if (currentUser) {\n      localStorage.setItem('currentUser', JSON.stringify(currentUser));\n    } else {\n      localStorage.removeItem('currentUser');\n    }\n  }, [currentUser]);\n\n  // Login with backend\n  const login = async (email, password) => {\n    setLoading(true);\n    try {\n      const res = await fetch(`http://localhost:5000/api/users/login?email=${encodeURIComponent(email)}&password=${encodeURIComponent(password)}`);\n      if (!res.ok) throw new Error('Invalid email or password');\n      const user = await res.json();\n      setCurrentUser(user);\n      toast.success('Logged in successfully!');\n    } catch (error) {\n      toast.error(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Register with backend\n  const register = async (email, password, displayName) => {\n    setLoading(true);\n    if (!email || !password || !displayName) {\n      toast.error('All fields are required');\n      setLoading(false);\n      return;\n    }\n    try {\n      const res = await fetch('http://localhost:5000/api/users', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: displayName,\n          email,\n          password\n        })\n      });\n      const data = await res.json();\n      if (!res.ok) {\n        toast.error((data === null || data === void 0 ? void 0 : data.error) || 'Failed to register');\n        throw new Error((data === null || data === void 0 ? void 0 : data.error) || 'Failed to register');\n      }\n      toast.success('Account created successfully! Please log in.');\n      return data;\n    } catch (error) {\n      toast.error(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout\n  const logout = async () => {\n    setCurrentUser(null);\n    // localStorage will be cleared by useEffect\n    toast.success('Logged out successfully!');\n  };\n  const value = {\n    currentUser,\n    login,\n    register,\n    logout,\n    isAuthenticated: !!currentUser,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"5mIWwtD4SPoQgqzgkaDHDS52LxM=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","toast","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","storedUser","localStorage","getItem","JSON","parse","loading","setLoading","setItem","stringify","removeItem","login","email","password","res","fetch","encodeURIComponent","ok","Error","user","json","success","error","message","register","displayName","method","headers","body","name","data","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","undefined","$RefreshReg$"],"sources":["C:/Users/kiran/Downloads/e-commerce/front_end_copy/src/Context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { toast } from 'react-hot-toast';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function AuthProvider({ children }) {\r\n  // Initialize currentUser from localStorage\r\n  const [currentUser, setCurrentUser] = useState(() => {\r\n    const storedUser = localStorage.getItem('currentUser');\r\n    return storedUser ? JSON.parse(storedUser) : null;\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Sync currentUser to localStorage\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      localStorage.setItem('currentUser', JSON.stringify(currentUser));\r\n    } else {\r\n      localStorage.removeItem('currentUser');\r\n    }\r\n  }, [currentUser]);\r\n\r\n  // Login with backend\r\n  const login = async (email, password) => {\r\n    setLoading(true);\r\n    try {\r\n      const res = await fetch(`http://localhost:5000/api/users/login?email=${encodeURIComponent(email)}&password=${encodeURIComponent(password)}`);\r\n      if (!res.ok) throw new Error('Invalid email or password');\r\n      const user = await res.json();\r\n      setCurrentUser(user);\r\n      toast.success('Logged in successfully!');\r\n    } catch (error) {\r\n      toast.error(error.message);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Register with backend\r\n  const register = async (email, password, displayName) => {\r\n    setLoading(true);\r\n    if (!email || !password || !displayName) {\r\n      toast.error('All fields are required');\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    try {\r\n      const res = await fetch('http://localhost:5000/api/users', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ name: displayName, email, password }),\r\n      });\r\n      const data = await res.json();\r\n      if (!res.ok) {\r\n        toast.error(data?.error || 'Failed to register');\r\n        throw new Error(data?.error || 'Failed to register');\r\n      }\r\n      toast.success('Account created successfully! Please log in.');\r\n      return data;\r\n    } catch (error) {\r\n      toast.error(error.message);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Logout\r\n  const logout = async () => {\r\n    setCurrentUser(null);\r\n    // localStorage will be cleared by useEffect\r\n    toast.success('Logged out successfully!');\r\n  };\r\n\r\n  const value = {\r\n    currentUser,\r\n    login,\r\n    register,\r\n    logout,\r\n    isAuthenticated: !!currentUser,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}