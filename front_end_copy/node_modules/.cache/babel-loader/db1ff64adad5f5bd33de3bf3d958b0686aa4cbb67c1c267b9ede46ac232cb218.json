{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kiran\\\\Downloads\\\\e-commerce\\\\front_end_copy\\\\src\\\\Context\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nexport function CartProvider({\n  children\n}) {\n  _s();\n  // Load cart from localStorage as fallback\n  const [cartItems, setCartItems] = useState(() => {\n    const stored = localStorage.getItem('cartItems');\n    return stored ? JSON.parse(stored) : [];\n  });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const {\n    currentUser\n  } = useAuth();\n\n  // Sync cartItems to localStorage\n  useEffect(() => {\n    localStorage.setItem('cartItems', JSON.stringify(cartItems));\n  }, [cartItems]);\n\n  // On login, merge local cart with backend cart\n  useEffect(() => {\n    if (currentUser && cartItems.length > 0) {\n      // Send local cart to backend, then reload cart from backend\n      fetch(`http://localhost:5000/api/cart/merge/${currentUser._id}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          items: cartItems.map(item => ({\n            ...item,\n            image: item.image\n          }))\n        })\n      }).then(() => loadCart());\n    }\n    // eslint-disable-next-line\n  }, [currentUser]);\n\n  // Load cart from backend, fallback to localStorage\n  const loadCart = async () => {\n    setLoading(true);\n    try {\n      if (currentUser) {\n        const res = await fetch(`http://localhost:5000/api/cart/${currentUser._id}`);\n        if (!res.ok) throw new Error('Failed to fetch cart');\n        const data = await res.json();\n        setCartItems(data.items || []);\n        localStorage.setItem('cartItems', JSON.stringify(data.items || []));\n      } else {\n        // fallback: keep localStorage cart\n        setCartItems(JSON.parse(localStorage.getItem('cartItems')) || []);\n      }\n    } catch (err) {\n      setError('Could not load cart from server, using local cart.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Add to cart via backend, fallback to local\n  const addToCart = async item => {\n    const payload = {\n      ...item,\n      productId: item.productId || item.id,\n      // ensure productId is present\n      image: item.image // ensure image is always sent\n    };\n    try {\n      if (currentUser) {\n        const res = await fetch(`http://localhost:5000/api/cart/${currentUser._id}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(payload)\n        });\n        if (!res.ok) throw new Error('Failed to add to cart');\n        const data = await res.json();\n        setCartItems(data.cart.items || []);\n        localStorage.setItem('cartItems', JSON.stringify(data.cart.items || []));\n      } else {\n        // fallback: add to localStorage\n        setCartItems(prev => {\n          const existing = prev.find(i => i.id === item.id);\n          if (existing) {\n            return prev.map(i => i.id === item.id ? {\n              ...i,\n              quantity: i.quantity + (item.quantity || 1)\n            } : i);\n          }\n          return [...prev, {\n            ...item,\n            quantity: item.quantity || 1\n          }];\n        });\n        setError('Not logged in, added to local cart.');\n      }\n    } catch (err) {\n      setError('Could not sync with server, added to local cart.');\n    }\n  };\n\n  // Remove from cart via backend, fallback to local\n  const removeFromCart = async itemId => {\n    try {\n      if (currentUser) {\n        const res = await fetch(`http://localhost:5000/api/cart/${currentUser._id}/${itemId}`, {\n          method: 'DELETE'\n        });\n        if (!res.ok) throw new Error('Failed to remove from cart');\n        const data = await res.json();\n        setCartItems(data.cart.items || []);\n        localStorage.setItem('cartItems', JSON.stringify(data.cart.items || []));\n      } else {\n        setCartItems(prev => prev.filter(i => i.id !== itemId));\n        setError('Not logged in, removed from local cart.');\n      }\n    } catch (err) {\n      setError('Could not sync with server, removed from local cart.');\n    }\n  };\n\n  // Update quantity (backend, fallback to local)\n  const updateQuantity = async (itemId, quantity) => {\n    if (quantity < 1) return removeFromCart(itemId);\n    try {\n      if (currentUser) {\n        const res = await fetch(`http://localhost:5000/api/cart/${currentUser._id}/${itemId}`, {\n          method: 'PATCH',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            quantity\n          })\n        });\n        if (!res.ok) throw new Error('Failed to update quantity');\n        const data = await res.json();\n        setCartItems(data.cart.items || []);\n        localStorage.setItem('cartItems', JSON.stringify(data.cart.items || []));\n      } else {\n        setCartItems(prev => prev.map(i => i.id === itemId ? {\n          ...i,\n          quantity\n        } : i));\n        setError('Not logged in, updated local cart.');\n      }\n    } catch (err) {\n      setError('Could not sync with server, updated local cart.');\n    }\n  };\n\n  // Clear cart (remove all items)\n  const clearCart = async () => {\n    if (currentUser) {\n      for (const item of cartItems) {\n        await removeFromCart(item._id || item.id);\n      }\n    } else {\n      setCartItems([]);\n      localStorage.removeItem('cartItems');\n    }\n  };\n\n  // Calculations\n  const subtotal = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);\n  const itemCount = cartItems.reduce((sum, item) => sum + item.quantity, 0);\n  const tax = subtotal * 0.1;\n  const total = subtotal + tax;\n  useEffect(() => {\n    loadCart();\n    // eslint-disable-next-line\n  }, [currentUser]);\n  useEffect(() => {\n    if (!currentUser) {\n      setCartItems([]);\n      localStorage.removeItem('cartItems');\n    }\n  }, [currentUser]);\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartItems,\n      addToCart,\n      removeFromCart,\n      clearCart,\n      updateQuantity,\n      subtotal,\n      itemCount,\n      total,\n      loading,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n}\n_s(CartProvider, \"neiYGTDr+6QHrmzfxdY9GivrVdc=\", false, function () {\n  return [useAuth];\n});\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  return useContext(CartContext);\n};\n_s2(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","useAuth","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cartItems","setCartItems","stored","localStorage","getItem","JSON","parse","loading","setLoading","error","setError","currentUser","setItem","stringify","length","fetch","_id","method","headers","body","items","map","item","image","then","loadCart","res","ok","Error","data","json","err","addToCart","payload","productId","id","cart","prev","existing","find","i","quantity","removeFromCart","itemId","filter","updateQuantity","clearCart","removeItem","subtotal","reduce","sum","price","itemCount","tax","total","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","$RefreshReg$"],"sources":["C:/Users/kiran/Downloads/e-commerce/front_end_copy/src/Context/CartContext.js"],"sourcesContent":["import { createContext, useContext, useEffect, useState } from 'react';\r\nimport { useAuth } from './AuthContext';\r\n\r\nconst CartContext = createContext();\r\n\r\nexport function CartProvider({ children }) {\r\n  // Load cart from localStorage as fallback\r\n  const [cartItems, setCartItems] = useState(() => {\r\n    const stored = localStorage.getItem('cartItems');\r\n    return stored ? JSON.parse(stored) : [];\r\n  });\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const { currentUser } = useAuth();\r\n\r\n  // Sync cartItems to localStorage\r\n  useEffect(() => {\r\n    localStorage.setItem('cartItems', JSON.stringify(cartItems));\r\n  }, [cartItems]);\r\n\r\n  // On login, merge local cart with backend cart\r\n  useEffect(() => {\r\n    if (currentUser && cartItems.length > 0) {\r\n      // Send local cart to backend, then reload cart from backend\r\n      fetch(`http://localhost:5000/api/cart/merge/${currentUser._id}`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ items: cartItems.map(item => ({ ...item, image: item.image })) }),\r\n      })\r\n        .then(() => loadCart());\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [currentUser]);\r\n\r\n  // Load cart from backend, fallback to localStorage\r\n  const loadCart = async () => {\r\n    setLoading(true);\r\n    try {\r\n      if (currentUser) {\r\n        const res = await fetch(`http://localhost:5000/api/cart/${currentUser._id}`);\r\n        if (!res.ok) throw new Error('Failed to fetch cart');\r\n        const data = await res.json();\r\n        setCartItems(data.items || []);\r\n        localStorage.setItem('cartItems', JSON.stringify(data.items || []));\r\n      } else {\r\n        // fallback: keep localStorage cart\r\n        setCartItems(JSON.parse(localStorage.getItem('cartItems')) || []);\r\n      }\r\n    } catch (err) {\r\n      setError('Could not load cart from server, using local cart.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Add to cart via backend, fallback to local\r\n  const addToCart = async (item) => {\r\n    const payload = {\r\n      ...item,\r\n      productId: item.productId || item.id, // ensure productId is present\r\n      image: item.image, // ensure image is always sent\r\n    };\r\n    try {\r\n      if (currentUser) {\r\n        const res = await fetch(`http://localhost:5000/api/cart/${currentUser._id}`, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(payload),\r\n        });\r\n        if (!res.ok) throw new Error('Failed to add to cart');\r\n        const data = await res.json();\r\n        setCartItems(data.cart.items || []);\r\n        localStorage.setItem('cartItems', JSON.stringify(data.cart.items || []));\r\n      } else {\r\n        // fallback: add to localStorage\r\n        setCartItems(prev => {\r\n          const existing = prev.find(i => i.id === item.id);\r\n          if (existing) {\r\n            return prev.map(i => i.id === item.id ? { ...i, quantity: i.quantity + (item.quantity || 1) } : i);\r\n          }\r\n          return [...prev, { ...item, quantity: item.quantity || 1 }];\r\n        });\r\n        setError('Not logged in, added to local cart.');\r\n      }\r\n    } catch (err) {\r\n      setError('Could not sync with server, added to local cart.');\r\n    }\r\n  };\r\n\r\n  // Remove from cart via backend, fallback to local\r\n  const removeFromCart = async (itemId) => {\r\n    try {\r\n      if (currentUser) {\r\n        const res = await fetch(`http://localhost:5000/api/cart/${currentUser._id}/${itemId}`, {\r\n          method: 'DELETE',\r\n        });\r\n        if (!res.ok) throw new Error('Failed to remove from cart');\r\n        const data = await res.json();\r\n        setCartItems(data.cart.items || []);\r\n        localStorage.setItem('cartItems', JSON.stringify(data.cart.items || []));\r\n      } else {\r\n        setCartItems(prev => prev.filter(i => i.id !== itemId));\r\n        setError('Not logged in, removed from local cart.');\r\n      }\r\n    } catch (err) {\r\n      setError('Could not sync with server, removed from local cart.');\r\n    }\r\n  };\r\n\r\n  // Update quantity (backend, fallback to local)\r\n  const updateQuantity = async (itemId, quantity) => {\r\n    if (quantity < 1) return removeFromCart(itemId);\r\n    try {\r\n      if (currentUser) {\r\n        const res = await fetch(`http://localhost:5000/api/cart/${currentUser._id}/${itemId}`, {\r\n          method: 'PATCH',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ quantity }),\r\n        });\r\n        if (!res.ok) throw new Error('Failed to update quantity');\r\n        const data = await res.json();\r\n        setCartItems(data.cart.items || []);\r\n        localStorage.setItem('cartItems', JSON.stringify(data.cart.items || []));\r\n      } else {\r\n        setCartItems(prev => prev.map(i => i.id === itemId ? { ...i, quantity } : i));\r\n        setError('Not logged in, updated local cart.');\r\n      }\r\n    } catch (err) {\r\n      setError('Could not sync with server, updated local cart.');\r\n    }\r\n  };\r\n\r\n  // Clear cart (remove all items)\r\n  const clearCart = async () => {\r\n    if (currentUser) {\r\n      for (const item of cartItems) {\r\n        await removeFromCart(item._id || item.id);\r\n      }\r\n    } else {\r\n      setCartItems([]);\r\n      localStorage.removeItem('cartItems');\r\n    }\r\n  };\r\n\r\n  // Calculations\r\n  const subtotal = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);\r\n  const itemCount = cartItems.reduce((sum, item) => sum + item.quantity, 0);\r\n  const tax = subtotal * 0.1;\r\n  const total = subtotal + tax;\r\n\r\n  useEffect(() => {\r\n    loadCart();\r\n    // eslint-disable-next-line\r\n  }, [currentUser]);\r\n\r\n  useEffect(() => {\r\n    if (!currentUser) {\r\n      setCartItems([]);\r\n      localStorage.removeItem('cartItems');\r\n    }\r\n  }, [currentUser]);\r\n\r\n  return (\r\n    <CartContext.Provider value={{\r\n      cartItems, addToCart, removeFromCart, clearCart, updateQuantity,\r\n      subtotal, itemCount, total, loading, error\r\n    }}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useCart = () => useContext(CartContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}